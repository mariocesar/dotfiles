#!/usr/bin/env bash

alias vim=nvim

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ls=' exa --group-directories-first'
alias l='ls -1'
alias ll='ls -l'
alias la='ls -al'

# shortcuts
alias c='clear'
alias r='reset'
alias o="open"

alias cd..="cd .."
alias ..='cd ..'
alias ...='cd ../..'

function new-python-project() {
    (
      set -eux
      git init $1
      cd $1

      mkdir src/$1
      touch src/$1/__init__.py
      curl -L --output ".gitignore" https://github.com/github/gitignore/raw/main/Python.gitignore
      touch README.md

      poetry init \
          --name $1 \
          --dev-dependency=black \
          --dev-dependency=isort \
          --quiet

      poetry install --quiet
    )
}

alias tf="terraform"
alias tfplan='terraform plan -lock=false'
alias makepassword="pwgen -y -n 18 1"
alias pp="ps axuf | pager"
alias vimrc="vimr ~/.config/nvim/init.lua"

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

# find . -name .gitattributes | args dirname
alias args="xargs -n1"


function git-short() {
    git log --pretty=format:%h -1 HEAD
}

function git-hash() {
    git log --pretty=format:%H -1 HEAD
}

function lan-ip() {
    ipconfig getifaddr en0
}

function public-ip() {
    dig +short txt ch whoami.cloudflare @1.0.0.1 | awk -F'"' '{ print $2}'
}

function public-ip6() {
    dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{ print $2}'
}

function dig-all() {
    dig +nocmd any +multiline +noall +answer "$1"
}

function urlencode() {
    python -c '
import sys
import urllib.parse
print(urllib.parse.quote(sys.argv[1], safe=""))
' "${*}"
}

function base64encode() {
    python -c '
import base64
import sys
print(base64.b64encode(sys.argv[1].encode("utf8")).decode())
' "${*}"
}

function todo() {
    grep -E '(TODO|FIXME|LATER|NOTE|ISSUE|SLOW):?\s' \
      --recursive \
      --binary-file=without-match \
      --line-number \
      --line-buffered \
      --exclude-dir={node_modules,.git,lib,.venv,.cache,".cache_*",__pycache__,.yarn} \
      --exclude={"*bundle.js","*.bundle","*.pyc","jquery*.js","*.map","*.min.js","*.csv","*.xls","*.xml","*.svg","*.json",TODO.md,todos.txt} \
      .
}

function docker-stop-all { docker ps && docker stop $(docker ps -q); }

function truecolor() {
    awk 'BEGIN{
            s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
            for (colnum = 0; colnum<77; colnum++) {
                r = 255-(colnum*255/76);
                g = (colnum*510/76);
                b = (colnum*255/76);
                if (g>255) g = 510-g;
                printf "\033[48;2;%d;%d;%dm", r,g,b;
                printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
                printf "%s\033[0m", substr(s,colnum+1,1);
            }
            printf "\n";
        }'
}

function emojis() {
    echo "‚ô•üëçüòçüôäü•±ü•∫‚ú®‚úÖüéäüèÑ"
}

function keeptrying() {
    while ! $($*)
    do
        echo "Trying again in 2s"
        sleep 2
    done
}

function docker-volume-ls() {
    docker run --rm -v ${1}:/data -it alpine find /data -type f
}

function docker-cat-entrypoint-contents() {
  local image_name=$1
  local entrypoint=$(docker inspect --format='{{json .Config.Entrypoint}}' "$image_name")

  if [ -z "$entrypoint" ] || [ "$entrypoint" = "null" ]; then
      echo "Entrypoint: Not found"
  else
      local entrypoint_script=$(echo "$entrypoint" | jq -r '.[]' | base64 --decode)
      echo "Entrypoint:"
      echo "$entrypoint_script"
  fi
}

function docker-prune() {
  echo "‚Üí Clean up all objects older than 24 hours that are not currently in use"

  (
    set -ex
    docker system prune --all --force --filter until=24h
    docker volume prune --force
  )
}

function ssm2dotenv() {
  local firstarg="$1"

  if [ -z $firstarg ] || [ $firstarg = '-help']; then
    echo "Usage: ssm2env /path/group"
    echo "Do not append slash at the end of the group"
    return 1
  fi

  (
    aws ssm get-parameters-by-path \
      --path "$firstarg/" \
      --recursive \
      --with-decryption \
      --query "Parameters[*].{Name: Name, Value: Value}" \
      --output text \
      | sed "s#$firstarg/##" \
      | awk '{print $1"="$2}'
  )
}

function dotenv2ssm() {
  local firstarg=$1
  local secondarg=$2

  if [ -z $firstarg ] || [ $firstarg = '-help']; then
    echo "Usage: ssm2env /path/group"
    echo "Do not append slash at the end of the group"
    return 1
  fi

	cat $secondArg | grep -v '^#\|^[[:space:]]*$$' | while read line; do \
		key=$(echo $line | cut -d= -f1); \
		value=$(echo $line | cut -d= -f2-); \
		response=$(aws ssm put-parameter \
			--name "/$$key" \
			--value "$value" \
			--type String \
			--overwrite); \
		version=$(echo $response | jq -r '.Version'); \
		echo "Parameter $key updated to version $version"; \
	done
}
