#!/usr/bin/env bash

alias vim=nvim
alias vimrc="vim ~/.config/nvim/init.lua --cmd 'cd ~/.config/nvim'"

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ls='eza --group-directories-first'
alias l='ls -1'
alias ll='ls -l'
alias la='ls -al'

# shortcuts
alias c='clear'
alias r='reset'
alias o="open"

alias cd..="cd .."
alias ..='cd ..'
alias ...='cd ../..'

alias makepassword="pwgen -y -n 18 1"
alias path='echo -e ${PATH//:/\\n}'

# Term
alias imgcat="wezterm imgcat"

# Terraform
alias tf="terraform"
alias tfplan='terraform plan -lock=false'

# Github CLI
alias suggest="gh copilot suggest"
alias explain="gh copilot explain"

# Git CLI
alias git-short=git log --pretty=format:%h -1 HEAD
alias git-hash=git log --pretty=format:%H -1 HEAD

function assert_inside_git() {
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not inside a git repository."
        return 1
    fi
}

function assert_arguments_provided() {
    if [ $# -eq 0 ]; then
        echo "Error: Commit message is required."
        echo "Usage: ci <commit message>"
        return 1
    fi
}

function ci() {
  # Usage: ci <commit message>
  assert_inside_git || return 1
  assert_arguments_provided "$@" || return 1

  git commit --amend -m "$*"
}

# Networking
alias lan-ip=ipconfig getifaddr en0
alias public-ip=dig +short txt ch whoami.cloudflare @1.0.0.1 | awk -F'"' '{ print $2}'
alias public-ip6=dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{ print $2}'
alias dig-all=dig +nocmd any +multiline +noall +answer "$1"

function urlencode() {
  python -c '
import sys
import urllib.parse
print(urllib.parse.quote(sys.argv[1], safe=""))
' "${*}"
}

function base64encode() {
  python -c '
import base64
import sys
print(base64.b64encode(sys.argv[1].encode("utf8")).decode())
' "${*}"
}

function todo() {
  grep -E '(TODO|FIXME|LATER|NOTE|ISSUE|SLOW):?\s' \
    --recursive \
    --binary-file=without-match \
    --line-number \
    --line-buffered \
    --exclude-dir={node_modules,.git,lib,.venv,.cache,".cache_*",__pycache__,.yarn} \
    --exclude={"*bundle.js","*.bundle","*.pyc","jquery*.js","*.map","*.min.js","*.csv","*.xls","*.xml","*.svg","*.json",TODO.md,todos.txt} \
    .
}

function truecolor() {
  awk 'BEGIN{
            s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
            for (colnum = 0; colnum<77; colnum++) {
                r = 255-(colnum*255/76);
                g = (colnum*510/76);
                b = (colnum*255/76);
                if (g>255) g = 510-g;
                printf "\033[48;2;%d;%d;%dm", r,g,b;
                printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
                printf "%s\033[0m", substr(s,colnum+1,1);
            }
            printf "\n";
        }'
}

function emojis() {
  echo "👍😄🎉💻🔥🚀🌟🌈🌺🍕🎶📚🌞🌍🍦🏆"
}

function keeptrying() {
  while ! $($*); do
    echo "Trying again in 2s"
    sleep 2
  done
}

function docker-stop-all {
  docker ps
  docker stop $(docker ps -q)
}

function docker-volume-ls() {
  docker run --rm -v ${1}:/data -it alpine find /data -type f
}

function docker-cat-entrypoint-contents() {
  local image_name=$1
  local entrypoint=$(docker inspect --format='{{json .Config.Entrypoint}}' "$image_name")

  if [ -z "$entrypoint" ] || [ "$entrypoint" = "null" ]; then
    echo "Entrypoint: Not found"
  else
    local entrypoint_script=$(echo "$entrypoint" | jq -r '.[]' | base64 --decode)
    echo "Entrypoint:"
    echo "$entrypoint_script"
  fi
}

function docker-prune() {
  echo "→ Clean up all objects older than 24 hours that are not currently in use"

  (
    set -ex
    docker system prune --all --force --filter until=24h
    docker volume prune --force
  )
}

function cleanup() {
  (
    set -ex
    find . -type f -name .DS_Store -delete
    find . -type f -name "*.pyc" -delete
  )
}

function fzfcopy() {
  fzf --multi | pbcopy
}

function suggest-commit-message() {
  local commit_message
  assert_inside_git || return 1

  if [ -z "$(git diff --staged)" ]; then
    echo "Error: No staged content to commit."
    return 1
  fi

  local commit_message=$(gpt --model gpt-4o-mini --prompt "Return only a short concise and adecuate git commit message following industry standards for the following patch:\n$(git diff --staged)\n")

  git commit --edit -m "$commit_message"
}
