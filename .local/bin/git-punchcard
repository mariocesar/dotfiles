#!/usr/bin/env python3
"""
A Git custom command to display commit activity as a punchcard.
"""

import argparse
from collections import defaultdict
import datetime
import subprocess
from subprocess import Popen


def get_commit_counts(start_date, end_date):
    cmd = [
        "git",
        "log",
        f"--since={start_date.isoformat()}",
        f"--until={end_date.isoformat()}",
        "--format=%cd",
        "--date=format:%w-%H",  # Format: day of week (0-6) - hour (00-23)
    ]

    counts = defaultdict(lambda: defaultdict(int))

    with Popen(  # noqa: S603, Command is validated
        cmd,
        stdout=subprocess.PIPE,
        text=True,
    ) as proc:
        output, _ = proc.communicate()

        if output is None:
            raise RuntimeError("Failed to get commit counts")

        for _line in output.splitlines():
            line = _line.strip()

            if not line:
                continue

            day, hour = line.split("-")
            counts[int(day)][int(hour)] += 1
            counts[int(day)]["total"] += 1

    return counts


header = """
    0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23
    -------------------------------------------------------------------------
""".rstrip()


def print_horizontal_punchcard(counts):
    days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    print(header)

    for day in range(7):
        row = ""
        for hour in range(24):
            count = counts[day][hour]
            if count == 0:
                row += "   "
            elif count < 5:
                row += " ◌ "
            elif count < 10:
                row += " ○ "
            elif count < 20:
                row += " ◍ "
            else:
                row += " ● "

        print(f"{days[day]:3s} {row} | {counts[day]['total']:3d}")

    print("\nLegend: ◌ (1-4), ○ (5-9), ◍ (10-19), ● (20+)")


def main():
    parser = argparse.ArgumentParser(
        description="Generate a git commit punchcard.",
    )

    parser.add_argument(
        "--days",
        type=int,
        default=365,
        help="Number of days to analyze (default: 365)",
    )
    args = parser.parse_args()

    end_date = datetime.date.today()
    start_date = end_date - datetime.timedelta(days=args.days)
    counts = get_commit_counts(start_date, end_date)

    print(f"Commit Punchcard ({start_date.isoformat()} to {end_date.isoformat()}):")
    print_horizontal_punchcard(counts)


if __name__ == "__main__":
    main()
